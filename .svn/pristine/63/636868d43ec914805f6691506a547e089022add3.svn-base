package Model.Players.NeuralNetwork.CriticPackage;

import Model.Game;
import Model.Players.NeuralNetwork.Generalizer;
import Model.Players.Player;

/** 
 * A class for interpreting whether the game has finished or is still in 
 * progress and sending the required variables to analysed to the generaliser.
 * This class is specific to the game of Monopoly and should be remade for
 * different neural networks.
 * @author Chris Berry
 */
public class Critic {
    
    private Generalizer generalizer;
    private int numOutputNodes;
    
    /**
     * Creates a new critic with the given parameters.
     * @param generalizer which critic will feed information to.
     * @param numberOfOutputNodes used by the TD AIs utilising the neural
     * network.
     * @param offsetForMoneyOutput value where the monetary amount of actions
     * starts appearing.
     */
    public Critic(Generalizer generalizer, int numberOfOutputNodes) {
        this.generalizer = generalizer;
        this.numOutputNodes = numberOfOutputNodes;
        
    }

/**
 * Key method.
 */    
    /**
     * Feeds the previous states inputs and the actual results through to the 
     * generaliser. If this was the last move of the game, this is noted and
     * the appropriate values are used instead.
     * @param previousStatesInput
     * @param results 
     */
    public void generalize(double[] previousStatesInput, double[] results) {
        //If game isn't finished generalize as normal.
        if (!Game.getInstance().isFinished()) {
            generalizer.generalize(previousStatesInput, results);
        } else { //Otherwise use final game output as the results.
            int winnerToken = -1;
            //Should only be one player left.
            if (Game.getInstance().getPlayers().size() == 1) {
                for (Player winner : Game.getInstance().getPlayers()) {
                    winnerToken = winner.getNumber();
                }
                //Winning player gets a value of 1, the rest get a value of 0.
                if (winnerToken != -1) {
                    double[] actualResultsList =
                            new double[numOutputNodes];
                    for (int j = 0; j < numOutputNodes; j++) {
                        if (j != winnerToken) {
                            actualResultsList[j] = 0;
                        } else {
                            actualResultsList[j] = 1;
                        }
                    }
                    System.out.println("Player " + winnerToken + " wins the game");
                    generalizer.generalize(previousStatesInput, actualResultsList);
                } else {
                    System.err.println("No winner is avaliable");
                }
            } else {
                System.err.println("The game is over but supposedly there"
                        + " are no players left.");
            }
        }
    }
    
/**
 * Getter methods.
 */   
    /**
     * Gets the generalizer used by the critic.
     * @return Generalizer used by the critic.
     */
    public Generalizer getGeneralizer() {
        return generalizer;
    }
}
