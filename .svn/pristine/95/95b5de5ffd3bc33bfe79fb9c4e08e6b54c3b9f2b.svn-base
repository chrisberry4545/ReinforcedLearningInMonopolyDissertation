package Display;

import Model.Board;
import javax.swing.*;
import Model.Players.Player;
import java.util.List;
import Model.Spaces.Space;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import Model.DealOffer;
import java.awt.Dimension;
import Model.Players.HumanPlayer;
import java.util.Map;
import java.util.HashMap;
import java.awt.GridLayout;

/**
 *
 * @author chris
 */
public class DealMakerDisplay extends JFrame{
    
    private final int displayWidth = 500;
    private final int displayHeight = 200;
    private JPanel currentPlayerDealPanel;
    private JPanel otherPlayerDealPanel;
    
    private boolean disposed;
    
    private Map<Player, JSpinner> playersMoneyMap = new HashMap();
    private Map<Player,Map<JCheckBox, Space> > playersCheckBoxes = new HashMap();
    private DealOffer dealOffer = null;
    private Player playerToOfferTo = null;
    private Player currentPlayer;
    
    
    private JPanel propertiesPanel;
    private JPanel otherPlayersPanel;
    private JPanel otherPlayerProperties;
    
    private JPanel spinnerPanel;
    private JSpinner otherPlayerSpinner;
    
    public DealMakerDisplay(Player dealMaker, List<Player> otherPlayers, JFrame parentFrame) {
        currentPlayer = dealMaker;
        this.setTitle("Make a Deal");
        this.getContentPane().setLayout(new BoxLayout(this.getContentPane(),
                BoxLayout.Y_AXIS));
        JPanel topPanel = new JPanel();
        topPanel.setLayout(new GridLayout());
        topPanel.add(new JLabel("Your assets (P" + dealMaker.getNumber() + ")"));
        topPanel.add(playerComboBox(otherPlayers));
        this.getContentPane().add(topPanel);
        
        this.getContentPane().add(setUpAllSpinners(otherPlayers, dealMaker));
        
        propertiesPanel = new JPanel();
        propertiesPanel.setLayout(new GridLayout());
        propertiesPanel.add(setUpCurrentPlayerPanel(dealMaker));
        otherPlayersPanel = setUpOtherPlayersPanel(otherPlayers);
        propertiesPanel.add(otherPlayersPanel);
        this.getContentPane().add(propertiesPanel);
        
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(setUpAcceptButton(dealMaker));
        this.getContentPane().add(buttonPanel);
        
        
        this.setPreferredSize(new Dimension(displayWidth,displayHeight));
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.pack();
        this.setLocationRelativeTo(parentFrame);
        this.setVisible(true);
    }
    
    @Override
    public void dispose() {
        this.disposed = true;
        super.dispose();
    }
    
    public JPanel setUpAllSpinners(List<Player> otherPlayers, Player currentPlayer) {
        for (Player player : otherPlayers) {
            playersMoneyMap.put(player,setUpNumberSpinner(player));
        }
        JSpinner currentPlayerSpinner = setUpNumberSpinner(currentPlayer);
        playersMoneyMap.put(currentPlayer,currentPlayerSpinner);
        spinnerPanel = new JPanel();
        spinnerPanel.setLayout(new GridLayout());
        spinnerPanel.add(currentPlayerSpinner);
        otherPlayerSpinner = playersMoneyMap.get(otherPlayers.get(0));
        spinnerPanel.add(otherPlayerSpinner);
        return spinnerPanel;
    }
    
    public JSpinner setUpNumberSpinner(Player player) {
        SpinnerNumberModel sModel = 
                new SpinnerNumberModel(0, 0, player.getMoney(), 1);
        JSpinner spinner = new JSpinner(sModel);
        return spinner;
    }
    
    public void swapNumberSpinner(Player player) {
        spinnerPanel.remove(otherPlayerSpinner);
        otherPlayerSpinner = playersMoneyMap.get(player);
        spinnerPanel.add(otherPlayerSpinner);
        spinnerPanel.revalidate();
    }
    
    public JPanel setUpCurrentPlayerPanel(Player player) {
        if (currentPlayerDealPanel != null) {
            currentPlayerDealPanel.removeAll();
        } else {
            currentPlayerDealPanel = new JPanel();
        }
        currentPlayerDealPanel.setLayout(new BoxLayout(currentPlayerDealPanel,
                BoxLayout.Y_AXIS));
//        playerNameLabel.setBorder(BorderFactory.createRaisedSoftBevelBorder());
        currentPlayerDealPanel.add(setUpDealMakerPanel(player));
        return currentPlayerDealPanel;
    }
    
    
    public JPanel setUpDealMakerPanel(Player player) {
        JPanel dealMakerPanel = new JPanel();
        dealMakerPanel.setLayout(new BoxLayout(dealMakerPanel, BoxLayout.Y_AXIS));
        
        dealMakerPanel.add(Box.createVerticalGlue());
        dealMakerPanel.add(setUpPropertyCheckBoxes(player));
        dealMakerPanel.add(Box.createVerticalGlue());
        
        return dealMakerPanel;
    }
    
    public JPanel setUpPropertyCheckBoxes(Player player) {
        JPanel propertyCheckBoxesPanel = new JPanel();
        propertyCheckBoxesPanel.setLayout(new BoxLayout(propertyCheckBoxesPanel,
                BoxLayout.Y_AXIS));
        
        for (Space space : player.getProperties()) {
            JCheckBox checkBox = new JCheckBox(space.getName());
            checkBox.setBackground(Board.getColor(space.getColorNumber()));
            checkBox.setForeground(Board.getMatchingTextColor(space.getColorNumber()));
            if (playersCheckBoxes.containsKey(player)) {
                playersCheckBoxes.get(player).put(checkBox, space);
            } else {
                Map<JCheckBox, Space> checkBoxSpaceMap = new HashMap();
                checkBoxSpaceMap.put(checkBox, space);
                playersCheckBoxes.put(player, checkBoxSpaceMap);
            }
            propertyCheckBoxesPanel.add(checkBox);
        }
        
        return propertyCheckBoxesPanel;
    }
    
    public JPanel setUpOtherPlayersPanel(List<Player> otherPlayers) {
        otherPlayersPanel = new JPanel();
        otherPlayersPanel.setLayout(new BoxLayout(otherPlayersPanel, BoxLayout.Y_AXIS));
        
        otherPlayerProperties = new JPanel();
        otherPlayerProperties = setUpOtherPlayerAssets(otherPlayers.get(0));
        
        return otherPlayersPanel;
    }
    
    public JPanel setUpOtherPlayerAssets(Player player) {
        playerToOfferTo = player;
        return setUpDealMakerPanel(player);
    }
    
    public void playerComboBoxChanged(Player player) {
        otherPlayersPanel.remove(otherPlayerProperties);
        otherPlayerProperties = setUpOtherPlayerAssets(player);
        otherPlayersPanel.add(otherPlayerProperties);
        otherPlayersPanel.revalidate();
        this.swapNumberSpinner(player);
        this.revalidate();
        this.repaint();
    }
    
    public JComboBox playerComboBox(final List<Player> players) {
        String[] playerNumbers = new String[players.size()];
        for (int i = 0; i < players.size(); i++) {
            playerNumbers[i] = "Player: " + players.get(i).getNumber();
        }
        final JComboBox playersComboBox = new JComboBox(playerNumbers);
        playersComboBox.setSelectedIndex(0);
        playersComboBox.setAction(new AbstractAction("Player changed") {
            {
                putValue(Action.ACTION_COMMAND_KEY, getValue(Action.NAME));
            } 
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedItem = (String)playersComboBox.getSelectedItem();
                String selectedPlayerNumber = selectedItem.substring(selectedItem.length() - 1, selectedItem.length());
                int playerSelected = Integer.parseInt(selectedPlayerNumber);
                Player playerChosen = null;
                for (Player p : players) {
                    if (p.getNumber() == playerSelected) {
                        playerChosen = p;
                    }
                }
                playerComboBoxChanged(playerChosen);
            }
        });;
        return playersComboBox;
    }
    
    public JButton setUpAcceptButton(final Player player) {
        JButton offerDeal = new JButton("Make Offer");
        offerDeal.setAction(new AbstractAction("Make Offer") {
            {
                putValue(Action.ACTION_COMMAND_KEY, getValue(Action.NAME));
            }
            @Override
            public void actionPerformed(ActionEvent e) {
                HumanPlayer humanPlayer = (HumanPlayer)player;
                if (humanPlayer.askPlayerYesOrNoQuestion("Are you sure you want to make "
                        + "this deal?", "Deal Confirmation")) {
                    establishDealOffer();
                }
            }
        });
        return offerDeal;
    }
    
    public void establishDealOffer() {
        DealOffer offer = new DealOffer();
        
        int moneyToOffer = (Integer)this.playersMoneyMap.get(currentPlayer).getValue();
        offer.offerCash(moneyToOffer);
        
        Map<JCheckBox, Space> thisPlayerMap = playersCheckBoxes.get(currentPlayer);
        if (thisPlayerMap != null) {
            for (JCheckBox checkBox : thisPlayerMap.keySet()) {
                if (checkBox.isSelected()) {
                    offer.addPropertyToOffer(thisPlayerMap.get(checkBox));
                }
            }
        }
        
        int moneyToRequest = (Integer)this.playersMoneyMap.get(playerToOfferTo).getValue();
        offer.requestCash(moneyToRequest);
        
        Map<JCheckBox, Space> otherPlayerMap = playersCheckBoxes.get(playerToOfferTo);
        if (otherPlayerMap != null) {
            for (JCheckBox checkBox : otherPlayerMap.keySet()) {
                if (checkBox.isSelected()) {
                    offer.addPropertyToRequest(otherPlayerMap.get(checkBox));
                }
            }
        }
        this.dealOffer = offer;
        
    }
    
    public DealOffer getDealOffer() {
        return dealOffer;
    }
    
    public Player getPlayerToOfferTo() {
        return playerToOfferTo;
    }
    
    public boolean isDisposed() {
        return disposed;
    }
}
