/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Model.Players;

import Model.Cards.Card;
import Model.DealOffer;
import Model.Game;
import Model.Players.NeuralNetwork.CriticPackage.Critic;
import Model.Spaces.Site;
import Model.Spaces.Space;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

/**
 *
 * @author Chris
 */
public class TDMoveEvaluatorDealSubset extends TDMoveEvaluator{

    /**
     * Cash increments reflects the value of cash the AI will use when deciding
     * how much to pay for something. It will assess the payoffs of paying
     * from 0 to its maximum amount of money and every step inbetween which
     * is of the appropriate increment.
     */
    protected static final int CASH_INCREMENTS = 50;
    
    public TDMoveEvaluatorDealSubset(Critic critic,
            TDInputGenerator inputGen, Player owningPlayer) {
        super(critic, inputGen, owningPlayer);
    }
       
    /**
     * Gets the best offer a player can make with each player trading up
     * to one site and all their money on a deal.
     * Note: for the time being offers won't include get out of jail cards.
     * Note: only allows for trading of one property by each player at the moment.
     * @return Map.Entry<Double, Map.Entry <Player, DealOffer > > which in order
     * represent: the value of the deal happening, the player the deal should
     * be made with, and the deal itself.
     * Returns null if the best option is to do nothing
     */
    @Override
    public Map.Entry<Double, Map.Entry<Player, DealOffer> >
            getOfferMostWorthMaking() {
        int offersToConsider = 15;
        double bestOfferValue = 0;
        DealOffer bestOffer = new DealOffer();
        Player bestOfferPlayerToOfferTo = null;
        for (int numOffers = 0; numOffers < offersToConsider; numOffers++) {
            Random random = new Random();
            Player currentPlayer = super.owningPlayer;
            int propertiesInOffer = 4;
            int numPropertiesToOffer = random.nextInt(propertiesInOffer);
            int playerNumToOfferTo = random.nextInt(Game.getInstance().getPlayers().size());
            Player playerToOfferTo = Game.getInstance().getPlayers().get(playerNumToOfferTo);


            int numPropertiesToRequest = random.nextInt(propertiesInOffer);

            DealOffer offer = new DealOffer();

            for (int i = 0; i < numPropertiesToOffer; i++) {
                int propertyNumber 
                        = random.nextInt(currentPlayer.getProperties().size());
                offer.addPropertyToOffer(currentPlayer.getProperties().get(propertyNumber));
            }

            for (int i = 0; i < numPropertiesToRequest; i++) {
                int propertyNumber
                        = random.nextInt(playerToOfferTo.getProperties().size());
                offer.addPropertyToRequest(playerToOfferTo.getProperties().get(propertyNumber));
            }

            //Money
            if (random.nextInt(2) == 0) {
                int money = random.nextInt(currentPlayer.getMoney());
                offer.offerCash(money);
            } else {
                int money = random.nextInt(playerToOfferTo.getMoney());
                offer.requestCash(money);
            }
            double valueOfOffer = 
                    super.getValueOfOffer(offer, playerToOfferTo, currentPlayer);
            if (valueOfOffer > bestOfferValue) {
                bestOfferValue = valueOfOffer;
                bestOffer = offer;
                bestOfferPlayerToOfferTo = playerToOfferTo;
            }
            
        }
        Map<Player,DealOffer> playerOfferMap = new HashMap<>();
        playerOfferMap.put(bestOfferPlayerToOfferTo, bestOffer);
        Map<Double, Map.Entry<Player,DealOffer> > resultMap = new HashMap<>();
        resultMap.put(bestOfferValue, super.generateMapEntry(playerOfferMap));
        
        return super.generateMapEntry(resultMap);
    }
    
}
