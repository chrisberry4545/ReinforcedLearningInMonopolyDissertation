/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package SpaceFunctionalityTests;


import java.util.ArrayList;
import java.util.List;
import GeneralTestMethods.GeneralTestMethods;
import Model.Board;
import Model.Game;
import Model.Spaces.*;
import Model.Spaces.SpaceEnums;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author chris
 */
public class UtilSpaceTest extends GeneralTestMethods{
    
    private Board board;
    
    public UtilSpaceTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }
    // TODO add test methods here.
    // The methods must be annotated with annotation @Test. For example:
    //
     @Test
     public void siteSpaceTest() {
         //Tests utils rents are working correctly.
         standardSetUp();
         checkTheNumberOfUtilsIsCorrect();
         //Test other player owning all utils
         for (Space util: board.getAllUtilities()) {
             util.setOwner(otherPlayer);
         }
         //Test for all dice rolls to 35 (the maximum).
         testAllDiceRollsForUtils(board.getAllUtilities(), 10);
         
         //Test other player owning electric company.
         standardSetUp();
         Utility elecCompany = board.getAllUtilities().get(0);
         elecCompany.setOwner(otherPlayer);
         List<Utility> elecCompanyList = new ArrayList();
         elecCompanyList.add(elecCompany);
         testAllDiceRollsForUtils(elecCompanyList, 4);
         
         //Test other player owning water company.
         standardSetUp();
         Utility waterCompany = board.getAllUtilities().get(1);
         waterCompany.setOwner(otherPlayer);
         List<Utility> waterCompanyList = new ArrayList();
         waterCompanyList.add(waterCompany);
         testAllDiceRollsForUtils(waterCompanyList, 4);
     }
     
     private void testAllDiceRollsForUtils(List<Utility> utils, int multiplyer) {
         //Test for all dice rolls to 35 (the maximum).
         for (Utility util : utils) {
             for (int i = 1; i < 36; i++) {
                 int expectedRent = multiplyer * i;
                 testUtilRent(util, i, expectedRent);
             }
         }
     }
     
     private void checkTheNumberOfUtilsIsCorrect() {
         if (board.getAllUtilities().size() == 2) {
             System.out.println("Test Succesful: The board has 2 utils");
         } else {
             fail("The board has " + board.getAllUtilities().size() +
                     " when it should have 2 utils");
         }
     }
     
     private void standardSetUp() {
         super.setUpGameWithOnePlayerAndOtherPlayer(Game.PLAYER_STARTING_MONEY*10);
         board = Game.getInstance().getBoard();
         testPlayer.setSpace(board.get(0));
     }
     
     private void testUtilRent(Space util, int diceRoll, int expectedRent) {
         int startingMoney = testPlayer.getMoney();
         
         Game.getInstance().movePlayerToSpaceNumber(testPlayer,
                 util.getSpaceNumber(), false);
         util.performAction(diceRoll, testPlayer);
         if (startingMoney - expectedRent == testPlayer.getMoney()) {
             System.out.println("Test Succesfull: player has payed "
                     + "the correct amount of rent");
         } else {
             fail("The player started with " + startingMoney + " and paid a"
                     + " should of paid rent of " + expectedRent
                     + " but was instead "
                     + "left with " + testPlayer.getMoney() + ".");
         }
                
     }
}
