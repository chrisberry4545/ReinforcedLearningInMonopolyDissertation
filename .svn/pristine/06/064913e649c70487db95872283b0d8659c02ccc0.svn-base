/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package monopoly;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import Model.Players.NeuralNetwork.CriticPackage.Critic;

/**
 *
 * @author Chris
 */
public class FeedResultsToNetwork {

    public static int feedResultsToNetwork(Critic networkToTrain) {
        BufferedReader reader = null;
        int gameNumber = 0;
        try {
            reader = new BufferedReader(new FileReader("MoveDB.csv"));
        } catch (FileNotFoundException f) {
            System.err.println(f);
        }
        String line = null;
        try {
            double[] previousInputs = null;
            double[] currentInputs = null;
            int feedNumber = 0;
            while ((line = reader.readLine()) != null) {
                String[] splitLine = line.split(",");
                if (splitLine[0].equals("End")) {
                    gameNumber++;
                    System.out.println("At game number: " + gameNumber);
                    boolean won = Boolean.parseBoolean(splitLine[1]);
                    String nextLine = reader.readLine();
                    if (nextLine != null) {
                        String[] lastInputsStr = nextLine.split(",");
                        double[] lastInputs = new double[lastInputsStr.length];
                        for (int i = 0; i < lastInputsStr.length; i++) {
                            lastInputs[i] = Double.parseDouble(lastInputsStr[i]);
                        }
                        networkToTrain.generalizeFromDB(lastInputs, won);
                        currentInputs = null;
                    }
                } else {
                    if (currentInputs == null) {
                        currentInputs = new double[splitLine.length];
                        for (int i = 0; i < splitLine.length; i++) {
                            currentInputs[i] = Double.parseDouble(splitLine[i]);
                        }
                        splitLine = reader.readLine().split(",");
                    }
                    previousInputs = currentInputs;
                    for (int i = 0; i < splitLine.length; i++) {
                        currentInputs[i] = Double.parseDouble(splitLine[i]);
                    }
                    double[] expected = networkToTrain.getGeneralizer().getEvaluator().evaluate(currentInputs);
                    networkToTrain.generalizeFromDB(previousInputs, expected);
                }
                feedNumber++;
            }
        } catch (IOException e) {
            System.err.println(e);
        }
        return gameNumber;
    }
    
}
