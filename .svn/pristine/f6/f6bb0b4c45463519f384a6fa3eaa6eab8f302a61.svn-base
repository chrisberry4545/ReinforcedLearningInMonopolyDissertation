package Model.Players;

import Model.DealOffer;
import Model.Game;
import Model.Spaces.Site;
import Model.Spaces.Space;
import Model.Board;
import java.util.List;
import Model.Players.NeuralNetwork.*;
import java.awt.Color;
import Model.Spaces.Station;
import Model.Spaces.Utility;
import java.util.ArrayList;

/**
 *
 * @author chris
 */
public class FirstTDPlayer extends AI {
    
    private Board board;
    private Evaluator evaluator;
    private int numInputNodes = 79;
    private int numHiddenNodes = 43;
    private int numOutputNodes = 6;
    
    public FirstTDPlayer(int setToken, Board currentBoard) {
        super(setToken);
        board = currentBoard;
        this.evaluator = new AbstractEvaluator(0.5, numInputNodes, 
                numHiddenNodes, numOutputNodes );
    }
    
    /**
     * Ask player if they want to buy the property.
     * @param property to ask about.
     * @return true if the user accepts the proposal, otherwise false.
     */
    @Override
    public boolean askPlayerIfTheyWantToBuyProperty(Space property) {
        List<double[]> allResults = new ArrayList();
        double[] inputsWithoutBuying = establishCurrentInputs();
        double[] resultsWithoutBuying = evaluator.evaluate(inputsWithoutBuying);
        allResults.add(resultsWithoutBuying);
        allResults.add(getResultsOfBuyingProperty(property));
        switch (decideWhichIsTheBestOptions(allResults, this.token)) {
            case 0 : return false;
            case 1: return true;
            default : return false;
        }
    }
    
    /**
     * Asks player to choose how they will act when they are in jail.
     * @return players choice.
     */
    @Override
    public int askPlayerInJailOptions() {
        List<double[]> results = new ArrayList();
        //Establish the 3 options.
        //Attempt to roll a double (i.e do nothing).
        double[] attemptToRoll = establishCurrentInputs();
        results.add(attemptToRoll);
        //Use a get out of jail card.
        if (this.useGetOutOfJailCard()) {
            double[] usedGetOutOfJailCard = establishCurrentInputs();
            results.add(evaluator.evaluate(usedGetOutOfJailCard));
            this.reverseGetOutOfJailCard();
        }
        //Pay the $50.
        if (this.optionalMoneyChange(-50)) {
            double[] payToGetOut = establishCurrentInputs(); 
            results.add(evaluator.evaluate(payToGetOut));
        }
        switch(decideWhichIsTheBestOptions(results, this.token)) {
            case 0 : return Player.ROLL_TO_LEAVE;
            case 1 : return Player.USE_GET_OUT_OF_JAIL_CARD;
            case 2 : return Player.PAY_TO_LEAVE;
            default : 
                System.err.println("No valid option selected from jail");
                return Player.ROLL_TO_LEAVE;
        }
    }
    
    /**
     * Gets the player's response to what they intend to do on their turn.
     * @return players choice.
     */
    @Override
    public int askPlayerMoveOptions() {
        //Process each of the players possible moves and see if it is worth
        //carrying them out.
    }
    
    @Override
    public void buyBackMortgagedProperty() {
        
    }
    
    @Override
    public void makeAnOfferToAnotherPlayer() {
        
    }
    
    @Override
    public void assessAnOffer(DealOffer offer, Player playerOffering) {
        
    }
    
    @Override
    public void sellHouses() {
        
    }
    
    @Override
    public int makeABid(Space property, int minimumBid) {
        
    }
    
    @Override
    public int makeABidOnHouse(int minBid, boolean isHouse) {
        
    }
    
    @Override
    public void receiveProperty(List<Space> properties) {
        
    }
    
    private double[] establishCurrentInputs() {
        double[] inputs = new double[numInputNodes];
        int inputNumber = 0;
        //Add the nodes for the other players.
        //There will always be 6 nodes for this.
        List<Player> allPlayers = Game.getInstance().getPlayers();
        for (int i = 0; i < 6; i++) {
            if (allPlayers.size() > i) {
                inputs[inputNumber] = allPlayers.get(i).getMoney()/1000;
            } else {
                inputs[inputNumber] = 0;
            }
            inputNumber++;
        }
        //22 nodes representing properties.
        for (Site site: board.getAllSites()) {
            //Adds values for the color.
            inputs[inputNumber] = convertColorToInt(site.getColor())/7;
            inputNumber++;
            //Adds values for owner.
            if (site.getOwner() != null) {
                inputs[inputNumber] =
                    site.getOwner().getToken()/Game.MAX_PLAYERS;
            } else {
                inputs[inputNumber] = 0;
            }
            inputNumber++;
            //Adds value for number of houses.
            inputs[inputNumber] = site.getHouses()/Site.MAX_HOUSES;
            inputNumber++;
        }
        //4 nodes representing stations.
        for (Station station : board.getAllStations()) {
            if (station.getOwner() != null) {
                inputs[inputNumber] =
                        station.getOwner().getToken()/Game.MAX_PLAYERS;
            } else {
                inputs[inputNumber] = 0;
            }
            inputNumber++;
        }
        //2 nodes representing utilies.
        for (Utility utility : board.getAllUtilities()) {
            if (utility.getOwner() != null) {
                inputs[inputNumber] =
                        utility.getOwner().getToken()/Game.MAX_PLAYERS;
            } else {
                inputs[inputNumber] = 0;
            }
            inputNumber++;
        }
        //1 node representing whether the player is in jail or not.
        if (!this.inJail()) {
            inputs[inputNumber] = 0;
        } else {
            inputs[inputNumber] = 1;
        }
        return inputs;
    }
    
    private int convertColorToInt(Color color) {
        if (color.equals(Board.BROWN)) {
            return 0;
        } else {
            if (color.equals(Board.LIGHT_BLUE)) {
                return 1;
            } else {
                if (color.equals(Board.PINK)) {
                    return 2;
                } else {
                    if (color.equals(Board.ORANGE)) {
                        return 3;
                    } else {
                        if (color.equals(Board.RED)) {
                            return 4;
                        } else {
                            if (color.equals(Board.YELLOW)) {
                                return 5;
                            } else {
                                if (color.equals(Board.GREEN)) {
                                    return 6;
                                } else {
                                    if (color.equals(Board.BLUE)) {
                                        return 7;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        System.err.println("Not a valid color");
        return -1;
    }
    
    public int decideWhichIsTheBestOptions(List<double[]> results,
            int playerNumber) {
        if (results.size() > 0) {
            double winningResults = results.get(0)[playerNumber];
            int currentWinningResult = 0;
            for (int i = 1; i < results.size(); i++) {
                if (results.get(i)[playerNumber] > winningResults) {
                    winningResults = results.get(i)[playerNumber];
                    currentWinningResult = i;
                }
            }
            return currentWinningResult;
        } else {
            System.err.println("Need at least one result to choose from");
            return -1;
        }
    }
    
    private double[] getResultsOfBuyingProperty(Space property) {
        int cost = property.getIntialCost();
        if (this.optionalMoneyChange(-cost)) {
            Player currentOwner = property.getOwner();
            property.setOwner(this);
            double[] inputsWithBuying = establishCurrentInputs();
            double[] resultsWithBuying = evaluator.evaluate(inputsWithBuying);
            //Set all inputs back.
            this.optionalMoneyChange(cost);
            property.setOwner(currentOwner);
            return resultsWithBuying;
        }
        return null;
    }
    
}
