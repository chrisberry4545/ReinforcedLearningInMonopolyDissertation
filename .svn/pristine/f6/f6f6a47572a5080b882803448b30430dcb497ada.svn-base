/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Model.Players;

import Display.BoardDisplay;
import Model.Bank;
import Model.DealOffer;
import Model.Game;
import Model.Spaces.Site;
import Model.Spaces.Space;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 * A Human player able to take part in the game of Monopoly.
 * @author Chris Berry
 */
public class HumanPlayer extends Player{
    
    private BoardDisplay display;
    
    public HumanPlayer(int setToken, BoardDisplay display) {
        super(setToken);
        this.display = display;
    }
    
    
    /**
     * Ask player yes/no question
     * @param message to ask.
     * @param title of message.
     * @return true if the user accepts the proposal, otherwise false.
     */
    public boolean askPlayerYesOrNoQuestion(String message, String title) {
        int response = JOptionPane.showConfirmDialog(display,
                message, title, JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            return true;
        }
        return false;
    }
    
    @Override
    public boolean askPlayerIfTheyWantToBuyProperty(Space property) {
        boolean choice = askPlayerYesOrNoQuestion("Do you want to buy: "
                    + property.getName() + " ?", "Buy Property.");
        if (choice == true) {
            super.buyProperty(property);
            this.messagePlayer("You bought " + property.getName()
                                   + " for " + property.getIntialCost(),
                                "You bought the property");
            return true;
        } else {
            this.messagePlayer("You can't afford " 
                                        + property.getName(),
                    "Not enough money");
            return false;
        }
    }
    
    public int askPlayerToPickFromOptions(Object[] options, String message,
            String title) {
            int n = JOptionPane.showOptionDialog(display,
                    message, title,
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);
            return n;
    }
    
    /**
     * Messages the player with some information.
     * @param message to give player
     * @param title of message
     */
    @Override
    public void messagePlayer (String message, String title) {
        JOptionPane.showMessageDialog(display,
                message, title, JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Asks player to choose how they will act when they are in jail.
     * @return players choice.
     */
    @Override
    public int askPlayerInJailOptions() {
        Object[] options = {"Pay to leave jail", "Roll To leave",
                    "Use get out of jail card", "Buy houses"};
        int n = JOptionPane.showOptionDialog(display,
                    "In Jail",
                    "In Jail",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);   
        switch (n) {
            case Player.PAY_TO_LEAVE :
                if (this.payToLeaveJail()) {
                    this.messagePlayer("You succesfully leave jail.",
                            "Out of jail");
                    return Player.rollDice();
                } else {
                    this.messagePlayer("You don't have enough money "
                            + "to leave jail.", "Still in jail");
                    return Player.STILL_IN_JAIL_TURN_NOT_OVER;
                }
            case Player.ROLL_TO_LEAVE :
                int diceRoll = this.rollToLeaveJail();
                //Returns -1 if a double isn't rolled.
                if (diceRoll == -1) {
                    this.messagePlayer("You didn't roll a double.",
                            "Still in jail");
                    //Turn finishes in this case.
                    return Player.STILL_IN_JAIL_TURN_OVER;
                } else {
                    this.messagePlayer("You succesfully leave jail.",
                            "Out of jail");
                    return diceRoll;
                }
            case Player.USE_GET_OUT_OF_JAIL_CARD :
                if (this.useGetOutOfJailCard() != null) {
                    this.messagePlayer("Used get out of jail card",
                            "Out of Jail");
                    return Player.rollDice();
                } else {
                    this.messagePlayer("You don't have a get out of jail"
                            + " card", "Still in jail");
                    return Player.STILL_IN_JAIL_TURN_NOT_OVER;
                }
            case Player.JAIL_BUY_HOUSES :
                this.showHouseBuyingOptions();
                return Player.STILL_IN_JAIL_TURN_NOT_OVER;
            default : System.err.println("Invalid move selected from jail");
                return Player.STILL_IN_JAIL_TURN_NOT_OVER;
        }
    }
    
    /**
     * Gets the player's response to what they intend to do on their turn.
     * @return players choice.
     */
    @Override
    public boolean askPlayerMoveOptions() {
        Object[] options = {"Roll", "Buy houses", "Offer a property", 
            "Mortgage Properties", "Sell Houses",
            "Buy back mortgaged properties", "View properties"};
        int n = JOptionPane.showOptionDialog(display,
                    "Choose an option",
                    "Player " + number +"'s Turn",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);
        
        switch(n) {
            case Player.ROLL_DICE : 
                return true;
            case Player.BUY_HOUSES :
                //Brings up options again after player makes a choice.
                showHouseBuyingOptions();
                break;
            case Player.OFFER_PROPERTY :
                this.makeAnOfferToAnotherPlayer();
                //Player can still continue their turn.
                break;
            case Player.MORTGAGE_PROPERTIES :
                this.mortgageProperties();
                //Player can still continue their turn.
                break;
            case Player.SELL_HOUSES :
                this.sellHouses();
                //Player can still continue their turn.
                break;
            case Player.BUY_BACK_MORTGAGED_PROPERTIES :
                this.buyBackMortgagedProperty();
                //Player can still continue their turn.
                break;
            case Player.SHOW_PROPERTIES :
                this.showPlayerProperties();
                //Player can still continue their turn.
                break;
        }
        return false;
    }
    
    /**
     * Shows the house buying options for the current player.
     */
    private void showHouseBuyingOptions() {
        Site site = choosePropertyForBuildingOn();
        //Returns the site number selected.
        if (site != null) {
            String title = "";
            String message = "";
            switch (site.addHouse()) {
                case Site.HOUSE_ADDED :
                    message = "Added house to " + site.getName() +
                    ". This now has " + site.getHouses();
                    title = "Added house";
                    break;
                case Site.TOO_MANY_HOUSES : 
                    message = "You already have the maximum amount of "
                            + "houses";
                    break;
                case Player.NOT_ENOUGH_MONEY :
                    message = "You don't have enough money for another house";
                    title = "Not enough money";
                    break;
            }
            messagePlayer(message, title);
            
        } else { // Happens if there are no properties avaliable and
                 // -1 is returned from sitenumber.
            messagePlayer("Not enough properties",
                                        "Not enough properties");
        }    
    }
        
    
    /**
     * Allows user to select from a list of possible to build on and
     * returns the site selected.
     * @return the Site selected by the user.
     */
    @Override
    public Site choosePropertyForBuildingOn() {
        List<Site> sitesCanBeBuiltOn = getSitesWhichCanBeBuiltOn();
        return (Site)selectFromListOfProperties(sitesCanBeBuiltOn,
                "Choose a Property", "Choose a property to build on");
    }
    
    /**
     * Allows the player to sell houses on properties they own.
     */
    @Override
    public void sellHouses() {
        if (getPropertiesWithHouses().size() > 0) {
            Site property = (Site)selectFromListOfProperties(getPropertiesWithHouses(),
                    "Sell houses",
                    "Select the property to sell houses on");
            int numOfHousesToSell = showIntSpinner(1, property.getHouses());
            super.returnHouse(property, numOfHousesToSell);
        }
        messagePlayer("No houses to sell", "Not enough houses");
    }
    
    @Override
    public void mortgageProperties() {
        List<Space> properties = getMortgagableProperties();
        if (properties.size() > 0) {
            Space toMortgage = selectFromListOfProperties(properties,
                    "Choose a Property", "Choose a property to mortgage");
            super.mortgageProperty(toMortgage);
        } else {
            messagePlayer("You don't have any properties to mortgage",
                    "No mortgable properties");
        }
    }
    
    /**
     * Show the properties the player currently owns.
     */
    @Override
    public void showPlayerProperties() {
        String spacesOwned = "";
        for (Space space :this.getProperties()) {
            spacesOwned += space.getName();
            if (space.getClass().equals(Site.class)) {
                Site site = (Site) space;
                spacesOwned += " (" + site.getHouses() + ") ";
            }
            spacesOwned += '\n';
        }
        messagePlayer(spacesOwned, "Properties Owned");
    }
    
    /**
     * Asks the player to choose a property to offer to another player.
     */
    public void makeAnOfferToAnotherPlayer() {
        Player otherPlayer = 
                selectFromListOfPlayers(Game.getInstance().getPlayers());
        DealOffer offer = new DealOffer();
        offer = setUpOfferRequest(offer, otherPlayer);
        offer = setUpPlayersOffer(offer);
        
        boolean offerAccepted = otherPlayer.assessAnOffer(offer, this);
        if (offerAccepted) {
            this.messagePlayer("Your offer was accepted!", "Offer accepted");
        } else {
            this.messagePlayer("Your offer was refused!", "Offer refused");
        }
    }
    
    private DealOffer setUpPlayersOffer(DealOffer offer) {
        Object options[] = {"Add property", "Add get out of jail card",
            "Add money", "Offer complete"};
        int choice = this.askPlayerToPickFromOptions(options, 
                "Which things would you \n"
                + "like to include in your offer", "Make a new offer");
        switch (choice) {
            case 0 : //Add a property to the offer.
                if (this.getProperties().size() > 0) {
                Space spaceToOffer = selectFromListOfProperties(this.getProperties(),
                    "Select a Property", "Choose a Property to offer to another "
                    + "player");
                offer.addPropertyToOffer(spaceToOffer);
                } else {
                    messagePlayer("You don't have any properties",
                            "No properties");
                }
                //Allows the player to add more things to the offer.
                setUpPlayersOffer(offer);
                break;
            case 1: //Add a GOJF card to the offer.
                if (this.getNumberOfGetOutOfJailCards() > 0) {
                    offer.offerGetOutOfJailCards(1);
                } else {
                    messagePlayer("You don't have any Get out of jail cards \n"
                            + "to give.", "Not enough cards");
                }
                //Allows the player to add more things to the offer.
                setUpPlayersOffer(offer);
                break;
            case 2: // Add money to the offer.
                int price = selectAPrice();
                offer.offerCash(price);
                //Allows the player to add more things to the offer.
                setUpPlayersOffer(offer);
                break;
            case 3: //Return the offer.
                return offer;
        }
        return offer;
    }
    
    private DealOffer setUpOfferRequest(DealOffer offer, Player otherPlayer) {
        Object options[] = {"Add property", "Add get out of jail card",
            "Add money", "Offer complete"};
        int choice = this.askPlayerToPickFromOptions(options, 
                "Which things do you \n"
                + "want from the other player", "Make a new offer");
        switch (choice) {
            case 0 : //Add a property.
                if (otherPlayer.getProperties().size() > 0) {
                    Space spaceToOffer = 
                         selectFromListOfProperties(otherPlayer.getProperties(),
                        "Select a Property", "Choose a Property to ask for \n"
                            + "from the other player");
                    offer.addPropertyToRequest(spaceToOffer);
                    //Allows the player to add more things to the offer.
                    setUpOfferRequest(offer, otherPlayer);
                } else {
                    messagePlayer("The other player doesn't \n"
                            + "have any properties", "No properties");
                }
                break;
            case 1: //Add a GOJC
                if (otherPlayer.getNumberOfGetOutOfJailCards() > 0) {
                    offer.requestGetOutOfJailCards(1);
                } else {
                    messagePlayer("They don't have any Get out of jail cards \n"
                            + "to give.", "Not enough cards");
                }
                //Allows the player to add more things to the offer.
                setUpOfferRequest(offer, otherPlayer);
                break;
            case 2 : //Add money
                int price = showIntSpinner(1, otherPlayer.getMoney());
                offer.requestCash(price);
                //Allows the player to add more things to the offer.
                setUpOfferRequest(offer, otherPlayer);
                break;
            case 3 : //offer complete
                return offer;
        }
        return offer;
    }
    
    @Override
    public boolean assessAnOffer(DealOffer offer, Player playerOffering) {
        String propertiesOffered = "";
        //Produces a list of the properties offered.
        if (offer.getOfferedProperties().size() > 0) {
            for (Space offeredProperty : offer.getOfferedProperties()) {
                propertiesOffered += offeredProperty.getName() + '\n';
            }
        }
        String propertiesRequested = "";
        //Produces a list of the properties requested.
        if (offer.getRequestedProperties().size() > 0) {
            for (Space requestedProperty : offer.getRequestedProperties()) {
                propertiesRequested += requestedProperty.getName() + '\n';
            }
        }
        int moneyOffered = offer.getOfferedCash();
        int moneyRequested = offer.getRequestedCash();
        int gojcCardsOffered = offer.getNumberOfferedGetOutOfJailCards();
        int gojcCardsRequested = offer.getNumberRequestedGetOutOfJailCards();
        Object[] options = {"Accept offer", "Decline Offer"};
        int n = JOptionPane.showOptionDialog(display,
                    "Player" + playerOffering.getNumber() + " offers you: \n" 
                    + propertiesOffered + " \n "
                    + "Money: " + moneyOffered + "\n"
                    + "Get out of Jail cards: " + gojcCardsOffered + "\n"
                    + "For your :" + propertiesRequested 
                    + moneyRequested + " of your money \n"
                    + "and " + gojcCardsRequested + " get out of jail cards",
                    "New offer",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);
        //If deal is accepted.
        if (n == JOptionPane.YES_OPTION) {
            acceptDealFromPlayer(offer, playerOffering);
            return true;
        }
        return false;
    }
    
    @Override
    public void receiveProperty(List<Space> properties) {
        for (Space property : properties) {
            property.setOwner(this);
            Object[] options = {"Pay Mortgage", "Pay Interest"};
            int n = askPlayerToPickFromOptions(options,
                    "Do you want to pay the mortgage price on "
                    + property.getName() + " of: "+ property.getMortgageRate() + '\n'
                    + "or do you want to pay the interest rate of: "
                    + property.getMortgageRepaymentRate(),
                    "Pay mortgage or interest");
            switch (n) {
                case 0 :
                    //If they can't afford the mortgage just let them mortgage it.
                    if (!this.buyProperty(property)) {
                        messagePlayer("You can't afford to buy this property,\n"
                                + "you will pay the mortgage fee instead.",
                                "You can't afford this");
                        this.forcedMoneyChange(-property.getMortgageRepaymentRate(),
                                Bank.getInstance());                   
                    }
                    break;
                case 1 :
                    this.forcedMoneyChange(-property.getMortgageRepaymentRate(),
                                Bank.getInstance());
            }
        }
    }
    
    @Override
    public int makeABid(Space property, int minimumBid,
                                List<Player> playersInBidding) {
        //Player needs to have enough money.
        if (this.getMoney() >= minimumBid &&
                askPlayerYesOrNoQuestion("Do you want to bid on " + property.getName(),
                "Bid on property?")) {
            return showIntSpinner(minimumBid, this.getMoney());
        }
        return Player.LEAVE_BIDDING_PROCESS;
    }
    
    @Override
    public int makeABidOnHouse(int minBid, boolean isHouse,
                            List<Player> playersInBidding) {
        String houseOrHotel = "";
        if (isHouse) {
            houseOrHotel = "house";    
        } else {
            houseOrHotel = "hotel";
        }
        
        if (this.getMoney() > minBid 
                && askPlayerYesOrNoQuestion("Do you want to bid on this " +
                houseOrHotel, "Place a bid?" )) {
            return showIntSpinner(minBid, this.getMoney());
        }
        return Player.LEAVE_BIDDING_PROCESS;
    }
    
    /**
     * Gives users dialog to select a property from a List of Property Names.
     * @param names List of the property names.
     * @return the space selected by the user.
     */
    private Space selectFromListOfProperties(List<? extends Space> names,
            String title, String message) {
        List<String> siteNames = new ArrayList();
        for (Space sites : names) {
            siteNames.add(sites.getName());
        }
        if (siteNames.size() > 0) {
            Object[] options = siteNames.toArray();
            int n = JOptionPane.showOptionDialog(display,
                    message, title,
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);
            if (n != -1) {
                return names.get(n);
            } else {
                return null;
            }
        }
        return null;
    }
    
    /**
     * Allows the user to select a player from a list of players.
     * @param players to select between.
     * @return the player selected.
     */
    private Player selectFromListOfPlayers(List<Player> players) {
        List<String> playerNames = new ArrayList();
        for (Player player : players) {
            String pName = "P" + player.getNumber();
            playerNames.add(pName);
        }
        if (playerNames.size() > 0) {
            Object[] options = playerNames.toArray();
            int n = askPlayerToPickFromOptions(options,
                    "Choose a player to offer the property to",
                    "Choose a player to offer the property to");
            return players.get(n);
        }
        return null;
    }
    
    /**
     * Allows the player to select an integer and returns this value.
     * @return int chosen by the player.
     */
    public int selectAPrice() {
        int maxPrice = 0;
        for (Player p : Game.getInstance().getPlayers()) {
            if (p.getMoney() > maxPrice) {
                maxPrice = p.getMoney();
            }
        }
        return showIntSpinner(1, maxPrice);
    }
    
    private int showIntSpinner(int minValue, int maxValue) {
        SpinnerNumberModel sModel = 
                new SpinnerNumberModel(minValue, minValue, maxValue, 1);
        JSpinner spinner = new JSpinner(sModel);
        JOptionPane.showMessageDialog(display, spinner);
        if (sModel.getNumber().intValue() < 1) {
            messagePlayer("Please choose a valid value", 
                    "Select a valid value");
            //Recursively calls itself until the user selects a valid value.
            sModel.setValue(selectAPrice());
        }
        return sModel.getNumber().intValue();
    }
    
    public void buyBackMortgagedProperty() {
        if (getMortgagedProperties().size() > 0) {
            Space toBuyBack = selectFromListOfProperties(getMortgagedProperties(),
                "Buy back property","Choose a property to buy back");
            //Alert the player if the re-mortgaging fails.
            if (!super.unmortgageProperty(toBuyBack)) {
                messagePlayer("You can't afford to buy this back", 
                        "Not enough money");
            }
        } else {
            messagePlayer("You don't have any mortgaged properties",
                    "No mortgaged properties");
        }
    }
    
    /**
     * Informs the player they have won the game.
     */
    @Override
    public void hasWon() {
        this.messagePlayer("You have won", "You're the winner!");
    }
    
    /**
     * Informs the other players they have lost and generalizes appropriately.
     */
    @Override
    public void hasLost() {
        this.messagePlayer("You have Lost", "You lost the game!");
    }
     
    
}
