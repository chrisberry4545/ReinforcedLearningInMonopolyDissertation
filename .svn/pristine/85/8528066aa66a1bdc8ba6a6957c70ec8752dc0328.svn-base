package Model;

import Model.Cards.Card;
import Model.Players.Player;
import Model.Spaces.Site;
import Model.Spaces.Space;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import Model.Players.AbstractTDPlayer;

/**
 * Stores information about the current state of the game.
 * @author Chris Berry
 */
public class Game {
    
    private static Game instance;
    
    private int turnCounter = 1;
    private int currentPlayerIndex;
    private List<Player> allPlayers;
    private List<Player> allPlayersAtStart;
    private Deck chanceCards;
    private Deck communityChest;
    private Board board;
    private boolean gameFinished;
    private int roundCounter = 1;
    
    public static final int MAX_ROUNDS = 65;
    public static final int PLAYER_STARTING_MONEY = 1500;
    public static final int PASS_GO_MONEY = 200;
    public static final int LEAVE_JAIL_COST = 50;
    public static final int MAX_PLAYERS = 6;
    public static final int MIN_PLAYERS = 2;
    public static final int MAX_NUM_OF_GET_OUT_OF_JAIL_CARDS = 2;
    
    protected Game() {
        gameFinished = false;
        board = new Board();
        intialiseCommunityChest();
        intialiseChanceCards();
    }
/**
 * Game setup methods.
 */    
    /**
    * Creates an instance of the game class or returns the instance
    * which already exists.
    * @return Game instance
    */
    public static Game newGame() {
        Bank.resetBank();
        instance = new Game();
        return instance;
    }
    
    /**
     * Adds players to the game.
     * @param players List of players to add to the game. These should be 
     * between the minimum and maximum amount of players which is checked 
     * within this method.
     */
    public void addPlayers(List<Player> players) {
        if (players.size() < MIN_PLAYERS) {
            System.err.println("You need at least " +
                    MIN_PLAYERS + " players");
            System.exit(0);
        }
        if (players.size() <= MAX_PLAYERS) {
            this.allPlayers = players;
            this.allPlayersAtStart = new ArrayList(players);
        } else {
            System.err.println("You are trying to create a game with " +
                    players.size() + " players.");
            System.err.println("You can't have more than " +
                    MAX_PLAYERS +" players");
            System.exit(0);
        }
    }
    
    /**
     * Gives all players their starting money and randomises the order of
     * the players.
     */
    public void setUpPlayersForGameStart() {
        for (Player player :allPlayers) {
            player.optionalMoneyChange(PLAYER_STARTING_MONEY);
        }
        //Puts players in a random order.
        Collections.shuffle(allPlayers);
    }
    
    /**
     * Instantiates the community chest for use within the game.
     */
    private void intialiseCommunityChest() {
        communityChest = new Deck(true, CreateCards.createCommunityChestCards());
        communityChest.shuffleDeck();
    }
    
    /**
     * Instantiates the chance cards to use within the game.
     */
    private void intialiseChanceCards() {
        chanceCards = new Deck(false, CreateCards.createChanceCards());
        chanceCards.shuffleDeck();
    }

/**
 * General game play methods.
 */    
    /**
     * Moves the player by a certain amounts of spaces and gives him money
     * if he passes go.
     * @param player
     * @param spacesToMove
     * @return newSpace number.
     */
    public int movePlayer(Player player, int spacesToMove) {
        int currentSpace = player.getCurrentSpace().getSpaceNumber();
        int newSpace = spacesToMove + currentSpace;
        //If player goes backwards past go make sure he's on the right space.
        if (newSpace < 0) {
            newSpace += board.size();
        }
        //If player passes go.
        if (newSpace >= board.size()) {
            newSpace -= board.size();
            player.optionalMoneyChange(Game.PASS_GO_MONEY);
        }
        player.setSpace(board.get(newSpace));
        return newSpace;
    }
    
    /**
     * Moves the player to the space number given.
     * @param player to move.
     * @param spaceNumberToMoveTo
     * @param collectGoMoney whether the player should collect money if he
     * passes go or not.
     */
    public void movePlayerToSpaceNumber(Player player,int spaceNumberToMoveTo,
            boolean collectGoMoney) {
        int currentSpace = player.getCurrentSpace().getSpaceNumber();
        int spacesToMove = spaceNumberToMoveTo - currentSpace;
        //If the number of spaces the player has to move is less than 0, then
        //the space is behind the player and the player must pass go.
        if (spacesToMove < 0) {
            spacesToMove += board.size();
            if (collectGoMoney) {
                player.optionalMoneyChange(Game.PASS_GO_MONEY);
            }
        }
        player.setSpace(board.get(spaceNumberToMoveTo));
    }
    
    /**
     * Returns the player whos turn is next and moves the player and 
     * turn counter along.
     * @return Player whos turn is next.
     */
    public Player nextPlayer() {
        if (currentPlayerIndex < allPlayers.size() - 1) {
            currentPlayerIndex++;
        } else {
            currentPlayerIndex = 0;
            //Increase round counter as all players have had a go.
            roundCounter++;
        }
        turnCounter++;
        return getCurrentPlayer();
    }
    
    /**
     * Draws a card from the community chest for a given player and returns
     * the card description.
     * @param player who is drawing the card.
     * @return cards description.
     */
    public void drawFromCommunityChest(Player player) {
        Card card = communityChest.drawCard();
        card.getAction().performAction(player, card);
        //Only need to put the card back if it's required.
        if (card.isPutAtBottom()) {
            putCardOnBottomOfDeck(false, card);
        }
        player.messagePlayer(card.getName(), "Community Chest");
    }
    
    /**
     * Draws a card from the chance for the given player and returns
     * the cards description.
     * @param player who is drawing the card.
     * @return cards description.
     */
    public void drawFromChance(Player player) {
        Card card = chanceCards.drawCard();
        card.getAction().performAction(player, card);
        //Only need to put the card back if it's required.
        if (card.isPutAtBottom()) {
            putCardOnBottomOfDeck(true, card);
        }
        player.messagePlayer(card.getName(), "Chance");
    }
    
    /**
     * Puts the chosen card on the bottom of the chosen deck.
     * @param chanceDeck true if card should be put at the bottom of the chance
     * deck.
     * @param card to put on the bottom of deck.
     */
    public void putCardOnBottomOfDeck(boolean chanceDeck, Card card) {
        if (chanceDeck) {
            chanceCards.putCardAtBottomOfPile(card);
        } else {
            communityChest.putCardAtBottomOfPile(card);
        }
    }

    /**
     * Starts an auction for the given property.
     * @param property 
     * @param removeCurrentPlayer whether the current player should be removed
     * from the precedings or not.
     */
    public void startAuction(Space property, boolean removeCurrentPlayer) {
        int maxBid = 0;
        //Creates a new array list from the old collection so we're not removing
        //the current players.
        List<Player> playersInBidding = new ArrayList(allPlayers);
        if (removeCurrentPlayer) {
            playersInBidding.remove(getCurrentPlayer());
        }
        while (playersInBidding.size() > 1) {
            List<Player> playersLeft = new ArrayList(playersInBidding);
            for (Player player : playersLeft) {
                //Ask each player to make a bid or leave the process.
                int bidAmount = player.makeABid(property, maxBid + 1,
                        playersInBidding);
                if (bidAmount != Player.LEAVE_BIDDING_PROCESS
                        && bidAmount != 0) {
                    maxBid = bidAmount;
                } else {
                    playersInBidding.remove(player);
                }
            }
        }
        //Need to make sure all players haven't left the process.
        //In which case nobody gets the property.
        //And that at least one player has made a bid.
        if (playersInBidding.size() > 0 && maxBid > 0) {
            //At this point there is a maximum bid and one player left in
            //the auction.
            Player winningPlayer = playersInBidding.get(0);
            //Charge the player what they bidded.
            winningPlayer.forcedMoneyChange(-maxBid, Bank.getInstance());
            //And give them the property.
            property.setOwner(winningPlayer);
            //TD players need to be alerted that they've won.
            updateInputsForTDPlayer(winningPlayer);
        }
        //If nobody has made a bid then the owner should be set to null.
        if (maxBid <= 0) {
            property.setOwner(null);
        }
    }
    
    /**
     * Starts an auction for a number of houses or hotels..
     * @param noOfBuildings to auction.
     * @param isHouse true if it is house, false if hotel.
     */
    public void startAuction(int noOfBuildings, boolean isHouse) {
        for (int i = 0; i < noOfBuildings; i++) {
            int maxBid = 0;
            //Creates a new array list from the old collection so we're not removing
            //the current players.
            List<Player> playersInBidding = new ArrayList(allPlayers);
            while (playersInBidding.size() > 1) {
                List<Player> playersLeft = new ArrayList(playersInBidding);
                for (Player player : playersLeft) {
                    //Ask each player to make a bid or leave the process.
                    int bidAmount = player.makeABidOnHouse(maxBid + 1, isHouse,
                            playersInBidding);
                    if (bidAmount != Player.LEAVE_BIDDING_PROCESS
                            && bidAmount != 0) {
                        maxBid = bidAmount;
                    } else {
                        playersInBidding.remove(player);
                    }
                }
            }
            //Need to make sure all players haven't left the process.
            //In which case nobody gets the property.
            if (playersInBidding.size() > 0 && maxBid > 0) {
                //At this point there is a maximum bid and one player left in
                //the auction.
                Player winningPlayer = playersInBidding.get(0);
                //Charge the player what they bidded.
                winningPlayer.forcedMoneyChange(-maxBid, Bank.getInstance());
                //Add the house to a Site of the players choice.
                Site siteToBuildOn = 
                        winningPlayer.choosePropertyForBuildingOn();
                if (siteToBuildOn != null) {
                    siteToBuildOn.addHouse();
                    //TD players need to be alerted that they've won.
                    updateInputsForTDPlayer(winningPlayer);
                } else {
                    System.err.println("Can't add to house to 'null' site");
                }
            }
        }
    }
    
    /**
     * TD players sometimes need to be alerted if they've won.
     * @param player to check if its a TD Player.
     */
    private static void updateInputsForTDPlayer(Player player) {
        if (player.getClass().equals(AbstractTDPlayer.class)) {
            AbstractTDPlayer tdPlayer = 
                        (AbstractTDPlayer) player;
            tdPlayer.changePreviousInputsToCurrentInputs();
        }
    }

/**
 * Methods for checking and handling a player winning.
 */
    /**
     * Declares a player bankrupt, removing them from the game and either
     * putting their properties up for auction (if they owe the bank) or 
     * giving them to the player they owed.
     * @param player to go bankrupt.
     * @param playerOwed player who money is owed to.
     */
    public void declareBankruptcy(Player player, Player playerOwed) {
        //Only needs to happen if the player is in the game.
        if (allPlayers.remove(player)) {
            System.out.println(player.getNumber() + " is bankrupt!");
            //If less than 2 players remain the game is over.
            checkIfPlayerHasWon();
            //Pay whatever money you can raise.
            if (player.getMoney() > 0) {
                playerOwed.optionalMoneyChange(player.getMoney());
            }
            //If another player is owed all of your assets are given to them.
            if (playerOwed.getClass() != Bank.class) {
                player.giveAllAssetsToAnotherPlayer(playerOwed);
            } else {
                //If the Bank is owed then your propertys are auctioned.
                List<Space> playersProperties = new ArrayList(player.getProperties());
                for(Space property : playersProperties) {
                    startAuction(property, false);
                }
            }
            if (currentPlayerIndex >= allPlayers.size()) {
                currentPlayerIndex = 0;
            }
        }
    }
    
    /**
     * Declares the player with the most assets the winner.
     */
    public void declarePlayerWithMostAssetsWinner() {
        Player winningPlayer = allPlayers.get(0);
        for (Player player : allPlayers) {
            if (player.getValueOfAllAssets() 
                    > winningPlayer.getValueOfAllAssets()) {
                winningPlayer = player;
            }
        }
        //Remove all players but the winning player from the list of players
        allPlayers.removeAll(allPlayers);
        allPlayers.add(winningPlayer);
        checkIfPlayerHasWon();
    }
    
    /**
     * If less than 2 players remain the game is over and inform the player
     * they have won.
     */
    private void checkIfPlayerHasWon() {
        if (allPlayers.size() < 2 && allPlayers.size() > 0) {
            Player winner = allPlayers.get(0);    
            this.setFinished(true);
            winner.hasWon();
            //Tell all looser they have lost:
            for (Player otherPlayer : this.getAllPlayersAtStart()) {
                if (!otherPlayer.equals(winner)) {
                    otherPlayer.hasLost();
                }
            }
        }
    }
    
/**
 * Setter methods.
 */    
     /**
     * Sets the game as finished or unfinished.
     * @param finished true if game should be finished.
     */
    public void setFinished(boolean finished) {
        gameFinished = finished;
    }
    
/**
 * Getter methods.
 */    
    /**
     * Gets the community chest used in the game.
     * @return the community chest deck.
     */
    public Deck getCommmunityChest() {
        return communityChest;
    }
    
    /**
     * Gets the chance cards used in the game.
     * @return the chance card deck.
     */
    public Deck getChanceCards() {
        return chanceCards;
    }
    
    /**
     * Gets the round counter for the game, tracking the number of rounds
     * that have happened in this instance of the game.
     * @return the number of rounds progressed by the game so far.
     */
    public int getRoundCount() {
        return roundCounter;
    }

    /**
     * Returns whether the game is over or still continuing.
     * @return true if the game is over.
     */
    public boolean isFinished() {
        return gameFinished;
    }
    
    /**
     * Gets the List of players still in the game.
     * @return List of players who still remain in the game.
     */
    public List<Player> getPlayers() {
        return allPlayers;
    }
    
    /**
     * Returns a List of all players present at the start of a game.
     * @return List of all players at the start of a game.
     */
    public List<Player> getAllPlayersAtStart() {
        return this.allPlayersAtStart;
    }
    
    /**
     * Gets the player who's turn it is currently.
     * @return Player who's turn it is.
     */
    public Player getCurrentPlayer() {
        return allPlayers.get(currentPlayerIndex);
    }
    
    /**
     * Gets the board used by the game.
     * @return the instance of the board used by the game.
     */
    public Board getBoard() {
        return board;
    }
    
    /**
     * Gets the instance of the game and prints an error if no game exists.
     * @return Game instance.
     */
    public static Game getInstance() {
        if (instance == null) {
            System.err.println("Game not yet created.");
        }
        return instance;
    }    
}
