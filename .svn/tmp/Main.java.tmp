/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package monopoly;

import Controller.ActionManager;
import Model.Game;
import Model.Players.FirstTDPlayer;
import Model.Players.NeuralNetwork.AbstractEvaluator;
import Model.Players.NeuralNetwork.Evaluator;
import Model.Players.NeuralNetwork.Generalizer;
import Model.Players.NeuralNetwork.Critic;

/**
 *
 * @author chris
 */
public class Main {
    
<<<<<<< .mine
    private static final String FILE_TO_LOAD = "June-01-2013-lambda0-1500runs";
=======
    private static final String FILE_TO_LOAD = "31-May-2013_hidden_nodes_25";
>>>>>>> .r48
    private static final String FILE_NAME_TO_SAVE_TO = FILE_TO_LOAD;
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
<<<<<<< .mine
        int gamesToRun = 1500;
        double lambda = 0.0;
=======
        int totalNumberOfRuns = 1500;
        int runsBeforeSave = 100;
        int amountOfSaves = totalNumberOfRuns/runsBeforeSave;
        double lambda = 0.5;
//        AbstractEvaluator evaluator = 
//                new AbstractEvaluator(lambda, FirstTDPlayer.NUM_INPUT_NODES, 
//                FirstTDPlayer.NUM_HIDDEN_NODES, 
//                FirstTDPlayer.NUM_OUTPUT_NODES);
        AbstractEvaluator evaluator = new AbstractEvaluator(FILE_TO_LOAD);
       // evaluator.loadNet(FILE_TO_LOAD);
>>>>>>> .r48
        
<<<<<<< .mine
        /**
         * Enable to start new network.
         */
        AbstractEvaluator evaluator = 
                new AbstractEvaluator(lambda, FirstTDPlayer.NUM_INPUT_NODES, 
                FirstTDPlayer.NUM_HIDDEN_NODES, 
                FirstTDPlayer.NUM_OUTPUT_NODES);
        evaluator.restartNetwork();
=======
        //Network needs to be reset so nodes created first know about their
        //output nodes created later.  (Only when network isn't loaded
       // evaluator.restartNetwork();
>>>>>>> .r48
        
        
        /**
         * Enable to load network.
         */
       // AbstractEvaluator evaluator = new AbstractEvaluator(FILE_TO_LOAD);
       // evaluator.loadNet(FILE_TO_LOAD);
        
        Generalizer generalizer = new Generalizer(evaluator);
        Critic critic = new Critic(generalizer);
        ActionManager am = ActionManager.getInstance();
        for (int runs = 0; runs < amountOfSaves; runs++ ) {
            for (int i = 0; i < runsBeforeSave; i++) {
                System.out.println("On run :" + i);   
                //startNewGame vars: critic, showGraphics, numHumanPlayers, numRandomAIs, numTDAIs.
                am.startNewGame(critic, false, 0, 0, 2);
            }
            //save after every hundred games.
            System.out.println("Saving the file (Save number: " + runs + ").");
            evaluator.saveNet(FILE_NAME_TO_SAVE_TO);
        }
    }
}
