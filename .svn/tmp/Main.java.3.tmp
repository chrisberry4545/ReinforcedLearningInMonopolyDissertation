package monopoly;

import Controller.ActionManager;
import Model.GameStats;
import Model.Players.*;
import Model.Players.NeuralNetwork.AbstractEvaluator;
import Model.Players.NeuralNetwork.CriticPackage.Critic;
import Model.Players.NeuralNetwork.Generalizer;
import java.util.ArrayList;
import java.util.List;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.util.Random;

/**
 * Main method for running the game of Monopoly with Reinforced Learning AIs.
 * @author Chris Berry
 */
public class Main {

    private static final int STARTING_RUNS = 0;
    
    private static final String FILE_NAME_TO_SAVE_TO  = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart160Hidden-runs";

    private static final String FILE_TO_LOAD = FILE_NAME_TO_SAVE_TO + STARTING_RUNS;
    
    private static final int OTHER_NET_RUNS = 40000;
    
    private static final String OTHER_NET_NAME = "June-19-2013-lambda0-9-runs";
    
    private static final String SECOND_FILE_TO_LOAD = OTHER_NET_NAME + OTHER_NET_RUNS;
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        boolean standardRun = false;
        TDInputGenerator inputGen = new FifthTDPlayerVer36(true);
        if (standardRun) {
<<<<<<< .mine
//            runSeries();
            double lambda = 0.9;
            standardRun(inputGen, lambda, FILE_NAME_TO_SAVE_TO, 
                    inputGen.getNumInputNodes(), inputGen.getNumHiddenNodes(),
                    inputGen.getNumOutputNodes());
=======
//            runSeries();
            double lambda = 0.9;
            standardRun(inputGen, lambda, FILE_NAME_TO_SAVE_TO);
>>>>>>> .r105
        } else {
//            System.out.println("Sending " + FILE_TO_LOAD + " to ELO Gauntlet");
//            ELOGauntlet.ELOGauntlet4Players(FILE_TO_LOAD, inputGen, FifthTDPlayerVer2.NUM_OUTPUT_NODES);
//            String fileToLoad = "July-15-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStartLambda95-runs5000";  
//            System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//            ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, FifthTDPlayerVer2.NUM_OUTPUT_NODES);
            
//            inputGen = new FifthTDPlayerVer36();
//            String fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart160Hidden-runs8500";  
//            System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//            ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, inputGen.getNumOutputNodes());
//            
//            inputGen = new FifthTDPlayerVer35();
//            fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart140Hidden-runs8500";  
//            System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//            ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, inputGen.getNumOutputNodes());
            
            inputGen = new FifthTDPlayerVer36(true);
            String fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart160Hidden-runs2000";  
            System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
            ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, inputGen.getNumOutputNodes());
     
        }
//        
//        inputGen = new FifthTDPlayerVer36();
//            String fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart160Hidden-runs8500";  
//            System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//            ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, inputGen.getNumOutputNodes());
//            
//            inputGen = new FifthTDPlayerVer35();
//            fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart140Hidden-runs8500";  
//            System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//            ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, inputGen.getNumOutputNodes());
//            
//            inputGen = new FifthTDPlayerVer32();
//            fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart80Hidden-runs8500";  
//            System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//            ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, inputGen.getNumOutputNodes());
//        
//        inputGen = new FifthTDPlayerVer31();
//        String fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart40Hidden-runs19960";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, FifthTDPlayerVer2.NUM_OUTPUT_NODES);
//        
//        inputGen = new FifthTDPlayerVer32();
//        fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart80Hidden-runs19960";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, FifthTDPlayerVer2.NUM_OUTPUT_NODES);
//        
//        inputGen = new FifthTDPlayerVer33();
//        fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart100Hidden-runs19960";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, FifthTDPlayerVer2.NUM_OUTPUT_NODES);
//        
//        inputGen = new FifthTDPlayerVer34();
//        fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart120Hidden-runs19960";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, FifthTDPlayerVer2.NUM_OUTPUT_NODES);
//        
//        inputGen = new FifthTDPlayerVer35();
//        fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart140Hidden-runs19960";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, FifthTDPlayerVer2.NUM_OUTPUT_NODES);
//        
//        inputGen = new FifthTDPlayerVer36();
//        fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart160Hidden-runs19960";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, FifthTDPlayerVer2.NUM_OUTPUT_NODES);
//        
//        inputGen = new FifthTDPlayerVer37();
//        fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart180Hidden-runs19960";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, FifthTDPlayerVer2.NUM_OUTPUT_NODES);
//        //General ELOs
        
//        inputGen = new FifthTDPlayerVer36();
//        String fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart160Hidden-runs10000";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, inputGen.getNumOutputNodes());
//
//        inputGen = new FifthTDPlayerVer35();
//        fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart140Hidden-runs10000";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, inputGen.getNumOutputNodes());
//
//        inputGen = new FifthTDPlayerVer32();
//        fileToLoad = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart80Hidden-runs10000";  
//        System.out.println("Sending " + fileToLoad + " to ELO Gauntlet");
//        ELOGauntlet.ELOGauntlet4Players(fileToLoad, inputGen, inputGen.getNumOutputNodes());
    }
    
    public static void runSeries() {
//        TDInputGenerator inputGen = new FifthTDPlayerVer2();
//        standardRun(inputGen, 0.9, "July-15-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart20hiddenNodes-runs");
//        
        TDInputGenerator inputGen = new FifthTDPlayerVer36(false);
//        standardRun(inputGen1, 0.90, "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart40Hidden-runs");
        String fileName = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart160Hidden-runs";
        String fileToLoad = fileName + "7500";
        AbstractEvaluator evaluator = new AbstractEvaluator(fileToLoad);
        Generalizer generalizer = new Generalizer(evaluator);
        Critic critic = new Critic(generalizer, inputGen.getNumOutputNodes());
        feedResultsToNetwork(critic);
        String fileNameToSaveTo = fileName + "8500";
        evaluator.saveNet(fileNameToSaveTo);
        
        
        fileName = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart140Hidden-runs";
        fileToLoad = fileName + "7500";
        evaluator = new AbstractEvaluator(fileToLoad);
        generalizer = new Generalizer(evaluator);
        critic = new Critic(generalizer, inputGen.getNumOutputNodes());
        feedResultsToNetwork(critic);
        fileNameToSaveTo = fileName + "8500";
        evaluator.saveNet(fileNameToSaveTo);
        
        
        fileName = "July-16-2013-4PlayerMoneyDBLearnerMonopolyAndNormalStart80Hidden-runs";
        fileToLoad = fileName + "7500";
        evaluator = new AbstractEvaluator(fileToLoad);
        generalizer = new Generalizer(evaluator);
        critic = new Critic(generalizer, inputGen.getNumOutputNodes());
        feedResultsToNetwork(critic);
        fileNameToSaveTo = fileName + "8500";
        evaluator.saveNet(fileNameToSaveTo);
//        
//        feedResultsToNetwork();
    }
    
        
    public static void standardRun(TDInputGenerator tdInputGen, double lambda,
            String fileToSaveTo) {
        boolean feedResultsToNet = false;
        
        
        int totalNumberOfRuns = 20000;
        int runsBeforeSave = 500;
        int amountOfSaves = totalNumberOfRuns/runsBeforeSave;
        int numberOfNetworks = 1;
        
        int numHumanPlayers = 0;
        int numRandomPlayers = 0;
        int numFullTDPlayers = 4;
        int numSimpleTDAIs = 0;
        int numDBGenRandomAIs = 0;
        
        boolean differentRunTypes = true;
        boolean displayGraphics = false;
        boolean newNetwork = true;
        boolean fixedWeights = false;
        boolean blockLearning = false;
        boolean useExploratoryMoves;
        //If learning is blocked then exploratory moves shouldn't be used.
        if (blockLearning) {
            useExploratoryMoves = false;
        } else {
            useExploratoryMoves = true;
        }
        
        int numInputNodes = tdInputGen.getNumInputNodes();
        int numHiddenNodes = tdInputGen.getNumHiddenNodes();
        int numOutputNodes = tdInputGen.getNumOutputNodes();
        
        AbstractEvaluator evaluator;
        if (newNetwork) {
            //Create a new network.
            if (!fixedWeights) {
                evaluator = new AbstractEvaluator(lambda, numInputNodes, 
                    numHiddenNodes, numOutputNodes);
            } else {
                evaluator = new AbstractEvaluator(lambda, numInputNodes,
                        numHiddenNodes, numOutputNodes);
            }
            evaluator.restartNetwork();
            //Save the network intially.
            String fileName = fileToSaveTo;
            evaluator.saveNet(fileName);
            System.out.println("Saving new network as: " + fileName);
        } else {
            System.out.println("Loading: " + FILE_TO_LOAD);
            //Load a network.
            evaluator = new AbstractEvaluator(FILE_TO_LOAD);
        }
        
        System.out.println("Learning blocked.. " + blockLearning);
        System.out.println("Using exploratory moves.. " + useExploratoryMoves);
        System.out.println("Number of networks.. " + numberOfNetworks);
        
        AbstractEvaluator evaluator2;
        Generalizer generalizer2;
        Critic critic2 = null;
        List<Critic> criticList = new ArrayList();
        List<TDInputGenerator> inputGenList = new ArrayList();
        if (numberOfNetworks == 2) {
            if (!newNetwork) {
                System.out.println("Loading Network 2: " + SECOND_FILE_TO_LOAD);
                evaluator2 = new AbstractEvaluator(SECOND_FILE_TO_LOAD);
                generalizer2 = new Generalizer(evaluator2);
                critic2 = new Critic(generalizer2, numOutputNodes);
                critic2.setBlockLearning(true);
            }
        }
        
        
        
        
        GameStats.setUpGameStats(numHumanPlayers + numRandomPlayers + numFullTDPlayers
                + numSimpleTDAIs + numDBGenRandomAIs);
        Generalizer generalizer = new Generalizer(evaluator);
        Critic critic = new Critic(generalizer, numOutputNodes);
        critic.setBlockLearning(blockLearning);
        ActionManager am = ActionManager.getInstance();
        criticList.add(critic);
        criticList.add(critic2);
        inputGenList.add(tdInputGen);
        inputGenList.add(tdInputGen);
        if (!feedResultsToNet) {
            for (int runs = 0; runs < amountOfSaves; runs++ ) {
                for (int i = 0; i < runsBeforeSave; i++) {
    //                System.out.println("On run :" + i);   
                    int runType = ActionManager.RUNTYPE_NORMALGAME;
                    if (differentRunTypes) {
                        Random random = new Random();
                        runType = random.nextInt(ActionManager.RUNTYPE_RANDOMSTART);
                    }
                    
                    if (numberOfNetworks < 2) {
                        
                        am.startNewGame(critic, tdInputGen, displayGraphics,
                                numHumanPlayers, numRandomPlayers,
                            numFullTDPlayers, numSimpleTDAIs, numDBGenRandomAIs,
                            useExploratoryMoves, runType);
                    } else {
                        am.startNewGame(criticList,inputGenList, displayGraphics,
                                numHumanPlayers, numRandomPlayers,
                            numFullTDPlayers, numSimpleTDAIs, numDBGenRandomAIs,
                            useExploratoryMoves, runType);
                    }

                }
//                GameStats.printStats();
                //save after every hundred games.
                System.out.println("Saving the file (Save number: " + runs + ").");
                int startingRuns;
                if (newNetwork) {
                    startingRuns = 0;
                } else {
                    startingRuns = STARTING_RUNS;
                }
                int totalRuns = (runs * runsBeforeSave) + runsBeforeSave + startingRuns;
                String fileNameToSave = fileToSaveTo + totalRuns;
                evaluator.saveNet(fileNameToSave);
            }
            int finalRuns = totalNumberOfRuns + STARTING_RUNS;
            String title = fileToSaveTo + finalRuns;
            GameStats.writeToCSV(title + "GameStats.csv", GameStats.getCSVString());
            GameStats.writeToCSV(title + "OfferedDeals.csv", GameStats.getOfferedDealCSVString());
            GameStats.writeToCSV(title + "AcceptedDeals.csv", GameStats.getCompletedDealCSVString());
            GameStats.printWinValues();
        } else {
            System.out.println("Feeding results to network...");
            if (!newNetwork) {
                System.err.println("Error.. Not a new network.. Exiting..");
                System.exit(0);
            }
            int numRums = feedResultsToNetwork(critic);
            String fileNameToSaveTo = fileToSaveTo + numRums;
            evaluator.saveNet(fileNameToSaveTo);
            System.out.println("Saved Network: " + fileNameToSaveTo);
        }
    }
    
    public static int feedResultsToNetwork(Critic networkToTrain) {
        BufferedReader reader = null;
        int gameNumber = 0;
        try {
            reader = new BufferedReader(new FileReader("MoveDB.csv"));
        } catch (FileNotFoundException f) {
            System.err.println(f);
        }
        
        String line = null;
        
        try {
            double[] previousInputs = null;
            double[] currentInputs = null;
            int feedNumber = 0;
            while ((line = reader.readLine()) != null) {
                String[] splitLine = line.split(",");
                if (splitLine[0].equals("End")) {
                    gameNumber++;
                    System.out.println("At game number: " + gameNumber);
                    boolean won = Boolean.parseBoolean(splitLine[1]);
                    String nextLine = reader.readLine();
                    if (nextLine != null) {
                        String[] lastInputsStr = nextLine.split(",");
                        double[] lastInputs = new double[lastInputsStr.length];
                        for (int i = 0; i < lastInputsStr.length; i++) {
                            lastInputs[i] = Double.parseDouble(lastInputsStr[i]);
                        }
                        networkToTrain.generalizeFromDB(lastInputs, won);
                        currentInputs = null;
                    }
                } else {
                    //New game
                    //Current inputs become the current line, and the line
                    //is move on one.
                    if (currentInputs == null) {
                        currentInputs = new double[splitLine.length];
                        for (int i = 0; i < splitLine.length; i++) {
                            currentInputs[i] = Double.parseDouble(splitLine[i]);
                        }
                    splitLine = reader.readLine().split(",");
                    }
                    previousInputs = currentInputs;
                    for (int i = 0; i < splitLine.length; i++) {
                        currentInputs[i] = Double.parseDouble(splitLine[i]);
                    }
                    double[] expected = networkToTrain.getGeneralizer().getEvaluator().evaluate(currentInputs);
                    networkToTrain.generalizeFromDB(previousInputs, expected);
                }
                feedNumber++;
            }
        } catch (IOException e) {
            System.err.println(e);
        }
        return gameNumber;
    }
    

    
}
